parameters:
  - name: cacheImages
    type: string
    default: mcr.microsoft.com/dotnet/sdk:5.0 mcr.microsoft.com/dotnet/aspnet:5.0

stages:
  - stage: CI

    variables:
      - name: app.root
        value: $(System.DefaultWorkingDirectory)/src

      - name: configuration.docker.imageName
        value: "iel182/estudo-docker"

      - name: configuration.cache.package
        value: $(Pipeline.Workspace)/.nuget/packages

      - group: LearnDevops - Sonar
      - name: configuration.sonar.extraProperties
        ${{ if eq(variables['Build.Reason'], 'PullRequest') }}:
          value: |
            sonar.pullrequest.key=$(System.PullRequest.PullRequestNumber)
            sonar.pullrequest.branch=$(System.PullRequest.SourceBranch)
            sonar.pullrequest.base=$(System.PullRequest.TargetBranch)
        ${{ if ne(variables['Build.Reason'], 'PullRequest') }}:
          value: sonar.branch.name=$(Build.SourceBranchName)

      - name: configuration.sonar.projectsettings
        value: $(app.root)/sonar-project.properties

      - name: configuration.sonar.projectkey
        value: $(SONAR_KEY)

      - name: configuration.sonar.projectname
        value: $(SONAR_PROJECT_NAME)

      - name: configuration.sonar.coveragereport
        value: "$(app.root)/LearnAzureDevOps.Tests/coverage.opencover.xml"
    jobs:
      - job: Build

        steps:
          - checkout: self

          # - task: Cache@2
          #   displayName: "cache nuget packages"
          #   inputs:
          #     key: 'nuget | "$(Agent.OS)" | **/packages.lock.json, !bin/**'
          #     restoreKeys: |
          #       nuget | "$(Agent.OS)"
          #       nuget
          #     path: $(configuration.cache.package)

          - task: Cache@2
            displayName: Caching Docker image
            inputs:
              key: 'docker | "$(Agent.OS)" | cacheImages'
              path: $(Pipeline.Workspace)/docker
              cacheHitVar: DOCKER_CACHE_RESTORED

          - script: |
              docker load < $(Pipeline.Workspace)/docker/aspnet5.tar
              docker load < $(Pipeline.Workspace)/docker/sdk5.tar
            condition: and(not(canceled()), eq(variables.DOCKER_CACHE_RESTORED, 'true'))
            displayName: docker load cache

          - script: |
              mkdir -p $(Pipeline.Workspace)/docker
              docker pull mcr.microsoft.com/dotnet/aspnet:5.0
              docker pull mcr.microsoft.com/dotnet/sdk:5.0
              docker save mcr.microsoft.com/dotnet/aspnet:5.0 > $(Pipeline.Workspace)/docker/aspnet5.tar
              docker save mcr.microsoft.com/dotnet/sdk:5.0 > $(Pipeline.Workspace)/docker/sdk5.tar
            condition: and(not(canceled()), or(failed(), ne(variables.DOCKER_CACHE_RESTORED, 'true')))
            displayName: docker image cache

          - task: SonarCloudPrepare@1
            displayName: "sonar prepare"
            enabled: true
            inputs:
              scannerMode: "MSBuild"
              SonarCloud: "$(configuration.sonar.connection)"
              organization: "$(configuration.sonar.organization)"
              projectKey: "$(configuration.sonar.projectkey)"
              projectName: "$(configuration.sonar.projectname)"
              extraProperties: |
                project.settings=$(configuration.sonar.projectsettings)
                sonar.projectBaseDir=$(app.root)
                sonar.sources=$(app.root)
                $(configuration.sonar.extraProperties)

          - task: UseDotNet@2
            displayName: dotnet install
            inputs:
              version: "5.0.x"
              packageType: runtime

          - task: DotNetCoreCLI@2
            displayName: dotnet build
            inputs:
              command: build
              projects: "$(app.root)/LearnAzureDevOps.sln"
              arguments: "--configuration Release"

          - task: DotNetCoreCLI@2
            displayName: dotnet test
            inputs:
              command: test
              projects: "$(app.root)/LearnAzureDevOps.sln"
              arguments: "--configuration Release --no-build /p:CollectCoverage=true /p:CoverletOutputFormat=opencover"
              publishTestResult: true
              sonarQubeRunAnalysis: true

          - task: SonarCloudPublish@1
            displayName: sonar publish
            enabled: true
            inputs:
              pollingTimeoutSec: 300

          - task: PublishCodeCoverageResults@1.175.1
            displayName: "publish coverage report"
            inputs:
              codeCoverageTool: "Cobertura"
              summaryFileLocation: $(configuration.sonar.coveragereport)
              failIfCoverageEmpty: true

          - task: DotNetCoreCLI@2
            displayName: dotnet publih
            inputs:
              command: publish
              projects: "$(app.root)/LearnAzureDevOps/LearnAzureDevOps.csproj"
              arguments: "--configuration Release --no-build --output $(System.Default.WorkingDirectory)/publish"
              publishWebProjects: true
              zipAfterPublish: false
              modifyOutputPath: false

          - task: Docker@2
            displayName: docker build image
            inputs:
              repository: $(configuration.docker.imageName)
              command: build
              Dockerfile: $(app.root)/LearnAzureDevOps/Dockerfile
              tags: "v$(Build.BuildNumber)"

          - task: Docker@2
            displayName: docker push image
            inputs:
              command: push
              containerRegistry: $(configuration.dockerhub.connection)
              repository: $(configuration.docker.imageName)
              includeLatestTag: true
              tags: "v$(Build.BuildNumber)"
